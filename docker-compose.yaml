# version: '3.8'

services:
  db:
    image: postgres:15
    container_name: postgres_db
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-mydatabase}
      POSTGRES_USER: ${POSTGRES_USER:-user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app_network
    restart: unless-stopped
    healthcheck: 
        test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-user} -d ${POSTGRES_DB:-mydatabase}"]
        interval: 10s
        timeout: 5s
        retries: 5

  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: pgadmin4_container
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL:-admin@example.com}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD:-adminsecret}
      PGADMIN_LISTEN_PORT: 80
      ports: 5050:80
    volumes: 
      - pgadmin_data:/var/lib/pgadmin
    networks: 
      - app_network
    depends_on: { db: { condition: service_healthy } }
    restart: unless-stopped

  rfm_manager:
    build: ./RFM_management
    container_name: rfm_manager
    environment:
      # --- Database ---
      POSTGRES_DB: ${POSTGRES_DB:-mydatabase}
      POSTGRES_USER: ${POSTGRES_USER:-user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
      POSTGRES_HOST: db
      POSTGRES_PORT: 5432
      # --- Verification & Session ---
      TOKEN_EXPIRATION_MINUTES: ${TOKEN_EXPIRATION_MINUTES:-30}
      APP_SECRET_KEY: ${APP_SECRET_KEY:-c3eea4e72ec11981e2c48798c13f634679b7c955433ae647}
      # --- reCAPTCHA v2 ---
      RECAPTCHA_SITE_KEY: 6LcvnhorAAAAACkm2jzB1gGUvDkHgFGrHbRDi5R6
      RECAPTCHA_SECRET_KEY: 6LcvnhorAAAAAN8BYM_6Bklvojrtrm9eOxhcHV2b
      # --- RFM Threshold ---
      RFM_COMPOSITE_THRESHOLD: ${RFM_COMPOSITE_THRESHOLD:-400.0}
      # --- Other App Config ---
      PYTHONUNBUFFERED: 1
      LOG_DATA_PATH: /app/network_logs/*.csv
      LOG_DATA_FORMAT: csv
      API_HOST: 0.0.0.0
      API_PORT: 8000
    volumes:
      - ./RFM_management:/app
      - ./network_logs:/app/network_logs
      # - ./templates:/app/templates # Mount templates (optional, usually copied in Dockerfile)
    ports:
      - "${API_PORT:-8000}:8000"
    networks:
      - app_network
    depends_on:
      db: { condition: service_healthy }
    # Command is in Dockerfile
    restart: unless-stopped

  web:
    build:
      context: ./verify # Use the Dockerfile in the current directory
      # Optional: Pass build arguments like the port

    environment:
      # --- reCAPTCHA v2 ---
      APP_SECRET_KEY: ${APP_SECRET_KEY:-c3eea4e72ec11981e2c48798c13f634679b7c955433ae647}
      RECAPTCHA_SITE_KEY: 6LcvnhorAAAAACkm2jzB1gGUvDkHgFGrHbRDi5R6
      RECAPTCHA_SECRET_KEY: 6LcvnhorAAAAAN8BYM_6Bklvojrtrm9eOxhcHV2b
    container_name: flask_recaptcha_app # Optional: A friendly name for the container
    ports:
      # Map port 5000 on the host to the FLASK_RUN_PORT inside the container
      # The internal port comes from the .env file (defaulting to 5000 if not set)
      - "5000:${FLASK_RUN_PORT:-5000}"
    volumes:
      - ./verify:/app
    env_file:
      - .env # Load environment variables from the .env file
    restart: unless-stopped # Optional: Policy for restarting the container
    networks: # Optional: Define networks if connecting to other services (like a DB)
      - app_network

networks:
  app_network:
    driver: bridge

volumes:
  postgres_data:
  pgadmin_data:


version: '3.8'

services:
  db:
    image: postgres:15 # Use a specific version for stability
    container_name: postgres_db
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-mydatabase} # Use environment variables from host or defaults
      POSTGRES_USER: ${POSTGRES_USER:-user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password} # Use strong passwords in production!
    volumes:
      - postgres_data:/var/lib/postgresql/data # Persist data
    ports:
      - "5432:5432" # Expose port 5432 locally if needed for direct access (optional)
    networks:
      - app_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-user} -d ${POSTGRES_DB:-mydatabase}"]
      interval: 10s
      timeout: 5s
      retries: 5

  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: pgadmin4_container
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL:-admin@example.com} # Set your admin email
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD:-admin}      # Set your admin password (change this!)
      PGADMIN_LISTEN_PORT: 80 # Port pgAdmin listens on *inside* the container
    ports:
      - "5050:80" # Map host port 5050 to container port 80
    volumes:
      - pgadmin_data:/var/lib/pgadmin # Persist pgAdmin configuration and servers
    networks:
      - app_network
    depends_on:
      db:
        condition: service_healthy # Wait for db to be healthy before starting pgadmin
    restart: unless-stopped

  app: # Your Python Application Service
    build: . # Assumes Dockerfile is in the same directory as docker-compose.yml
    container_name: my_python_app
    environment:
      # Pass database credentials to the Python app container
      POSTGRES_DB: ${POSTGRES_DB:-mydatabase}
      POSTGRES_USER: ${POSTGRES_USER:-user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
      POSTGRES_HOST: db # *** IMPORTANT: Use the service name 'db' here ***
      POSTGRES_PORT: 5432
      # Add any other environment variables your app needs
      PYTHONUNBUFFERED: 1 # Recommended for seeing logs immediately
    volumes:
      - .:/app # Mount your application code into the container (adjust if needed)
    networks:
      - app_network
    depends_on:
      db:
        condition: service_healthy # Wait for db to be healthy before starting app
    # command: ["python", "your_main_script.py"] # Optional: override Dockerfile CMD
    restart: unless-stopped

networks:
  app_network:
    driver: bridge

volumes:
  postgres_data: # Define named volume for persistent DB data
  pgadmin_data:  # Define named volume for persistent pgAdmin data

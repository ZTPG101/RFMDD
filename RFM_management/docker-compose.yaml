
version: '3.8'

services:
  db:
    image: postgres:15
    container_name: postgres_db
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-mydatabase}
      POSTGRES_USER: ${POSTGRES_USER:-user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app_network
    restart: unless-stopped
    healthcheck: healthcheck

  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: pgadmin4_container
    environment: env vars
    PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL:-admin@example.com}
    PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD:-admin}
    PGADMIN_LISTEN_PORT: 80
    ports: ["5050:80"]
    volumes: [pgadmin_data:/var/lib/pgadmin]
    networks: [app_network]
    depends_on: { db: { condition: service_healthy } }
    restart: unless-stopped

  mailhog:
    image: mailhog/mailhog:latest
    container_name: mailhog_service
    ports: ["1025:1025", "8025:8025"]
    networks: [app_network]
    restart: unless-stopped

  app: # UPDATE the app service
    build: .
    container_name: my_python_app
    environment:
      # --- Database ---
      POSTGRES_DB: ${POSTGRES_DB:-mydatabase}
      POSTGRES_USER: ${POSTGRES_USER:-user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
      POSTGRES_HOST: db
      POSTGRES_PORT: 5432
      # --- SMTP ---
      SMTP_SERVER: ${SMTP_SERVER:-mailhog}
      SMTP_PORT: ${SMTP_PORT:-1025}
      SENDER_EMAIL: ${SENDER_EMAIL:-noreply@example.com}
      SENDER_PASSWORD: ${SENDER_PASSWORD}
      # --- Verification & Session ---
      TOKEN_EXPIRATION_MINUTES: ${TOKEN_EXPIRATION_MINUTES:-30}
      APP_SECRET_KEY: ${APP_SECRET_KEY:-change_this_in_production_!} # ***** SET A REAL SECRET KEY in .env *****
      # --- reCAPTCHA v2 ---
      RECAPTCHA_SITE_KEY: ${RECAPTCHA_SITE_KEY}       # ***** GET FROM GOOGLE & SET in .env *****
      RECAPTCHA_SECRET_KEY: ${RECAPTCHA_SECRET_KEY}   # ***** GET FROM GOOGLE & SET in .env *****
      # --- RFM Threshold ---
      RFM_COMPOSITE_THRESHOLD: ${RFM_COMPOSITE_THRESHOLD:-400.0}
      # --- Other App Config ---
      PYTHONUNBUFFERED: 1
      LOG_DATA_PATH: /app/network_logs/*.csv
      LOG_DATA_FORMAT: csv
      # API_HOST: 0.0.0.0 # Set via Uvicorn command
      # API_PORT: 8000 # Set via Uvicorn command
    volumes:
      - .:/app
      - ./network_logs:/app/network_logs
      # - ./templates:/app/templates # Mount templates (optional, usually copied in Dockerfile)
    ports:
      - "${API_PORT:-8000}:8000"
    networks:
      - app_network
    depends_on:
      db: { condition: service_healthy }
      mailhog: { condition: service_started }
    # Command is in Dockerfile
    restart: unless-stopped

networks:
  app_network:
    driver: bridge

volumes:
  postgres_data:
  pgadmin_data:
